apply plugin: 'maven'
apply plugin: 'signing'

task cleanLocalMavenRepository(type: Delete) {
    delete "${localMavenRepositoryPath}/damage-control-maven-plugin"
}

clean.dependsOn cleanLocalMavenRepository

task install(type: Exec, dependsOn: ':html-generator:install') {
    logging.captureStandardOutput LogLevel.INFO

    doFirst {
        if (!System.getenv('M2_HOME') && !System.getenv('MVN_COMMAND')) {
            throw new GradleException('M2_HOME nor MVN_COMMAND environment variables not defined.')
        }
    }

    def mvn

    if (System.getenv('M2_HOME')) {
        def ext = System.getProperty('os.name').contains('Win') ? '.bat' : ''
        mvn = System.getenv('M2_HOME') + '/bin/mvn' + ext
    } else {
        mvn = System.getenv('MVN_COMMAND')
    }

    executable mvn
    args 'clean'
    args 'install'
}

artifacts {
    archives file: file("target/damage-control-maven-plugin-${version}.jar"), name: "damage-control-maven-plugin-${version}", type: 'jar', builtBy: install
}

signing {
    required { isReleaseBuild }
    sign configurations.archives
}

uploadArchives {
    repositories.mavenDeployer {
        beforeDeployment { deployment -> signing.signPom(deployment) }

        snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots") {
            authentication(userName: sonatypeUsername, password: sonatypePassword)
        }

        repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2") {
            authentication(userName: sonatypeUsername, password: sonatypePassword)
        }

        pom.withXml { provider ->
            def builder = provider.asString()
            builder.length = 0
            builder << file('pom.xml').getText('utf-8')
        }
    }
}

uploadArchives.dependsOn ':end-2-end-test:test'
